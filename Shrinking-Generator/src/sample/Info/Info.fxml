<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<AnchorPane fx:id="infoPane" prefHeight="680.0" prefWidth="1080" stylesheets="@../css/Main.css" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="sample.Info.InfoController">
    <children>
    <Button fx:id="backButton" layoutX="485.0" layoutY="592.0" mnemonicParsing="false" onAction="#loadMainStage" prefHeight="52.0" prefWidth="130.0" text="Back" textAlignment="CENTER">
         <font>
            <Font size="29.0" />
         </font></Button>
      <Text disable="true" layoutX="357.0" layoutY="62.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Szyfrator Strumieniowy">
         <font>
            <Font size="36.0" />
         </font>
      </Text>
      <TextArea layoutX="66.0" layoutY="117.0" prefHeight="445.0" prefWidth="948.0" text="Podany sztfrator działa wraz z &quot;Generatorem Rozrzedzającym&quot;.&#10;&#10;Istnieją dwa tryby:&#10;1) Dla już wcześniej wygenerowanego ciągu, gdzie najpierw uruchamiamy generator&#10;dla interesującej nas długości i wielkości rejestrów LFSR a później przechodzimy do szyfratora.&#10;2) Gdy chcemy od razu przejść do szyfrowania pożądanego ciągu generator działa &#10;dla losowych wielkości rejestrów z zakresu (20-28) i długości ciągu równej wielkości tekstu.&#10;&#10;Później otrzymany ciąg jest poddawany operacji XOR wraz z zamienionym tekstem na wartości 0 i 1.&#10;Np. Dla wartości 'A' otrzymamy ciag bitów: 01000001&#10;A ciąg wygenerowany to np: 01111001&#10;Z xorowania tych dwóch ciągów otrzymujemy: 00111000&#10;Co zostaje zaszyfrowane jako: 8.&#10;&#10;Następnie przechodzimy do deszyfracji która jest po prostu ponownych xorowaniem ciągu wyjściowego i wygenerowanego.">
         <font>
            <Font size="16.0" />
         </font>
      </TextArea>
    </children>
</AnchorPane>
